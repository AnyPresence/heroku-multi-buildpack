#!/usr/bin/env ruby

$stdout.sync = true

$:.unshift File.expand_path("../../lib", __FILE__)
require 'multipack'

log "Processing #{TRIGGER_FILE_NAME}..."

repos = IO.readlines(TRIGGER_FILE)
env_vars = ""
counter = 0
repos.each do |git_repo|
  git_repo.strip!
  next if git_repo.empty?
  name = git_repo.split('/').last
  log "Cloning #{name}"
  dir = Dir.mktmpdir
  output = `git clone #{git_repo} #{dir} >/dev/null 2>&1 `
  if $?.success?
    Dir.chdir dir
    bin_dir = File.join(dir,'bin')
    detect = File.join(bin_dir,'detect')
    compile = File.join(bin_dir,'compile')
    release = File.join(bin_dir,'release')
    fix_executable_permissions(detect,compile,release)

    log "Detecting..."    
    detect_output = `#{detect} #{WORK_DIR}`
    if $?.success?
      puts detect_output
      log "Compiling..."
      compile_output = `#{compile} #{WORK_DIR} #{CACHE_DIR} --with-freetds-dir=#{WORK_DIR}/vendor/freetds`
      
      if $?.success?
        puts compile_output

        release_output = `#{release} #{WORK_DIR}`
        
        if $?.success?
          log "Collected release output"
          parse_release_vars(release_output)
          counter = counter + 1
        else
          log "Error releasing!"
        end
      else
        log "Error compiling #{compile_output}"
      end
    end
    #FileUtils.remove_entry_secure dir
  else
    log "Failed to clone #{git_repo}!"
  end
  
  exit 1 unless $?.success?
end

log "Putting releases together..."
save_release_file()
log "Done compiling all #{counter} buildpacks!"
